/*
Simple slash type message hit counter by Jkk.
I may extend it to cover other hit types also
Tell me if something is horribly wrong... 
Thanks to Kohothegreat for advicing with the regexp.
*/

SCRIPT_NAME="hits";
SCRIPT_DESC = "collects hit messages";
SCRIPT_OFF = false;


Color red = new Color(127, 0, 0);
 
//Message counter arrays
slashes  = new int [26];
unarmeds = new int [26];
bashes   = new int [26];
pierces  = new int [26];
shields  = new int [26];
//Messages stored in an array
String[] slashMessages  ={"barely graze","solidly slash","gash","lightly cut","cut","tear","incise","shred","horribly shred","slash","incisively cut","incisively tear","slit","cruelly tatter","savagely shave","rive","cruelly slash","uncontrollably slash","quickly cut","savagely rip","BRUTALLY TEAR","SAVAGELY SHRED","CRUELLY REND","BARBARICALLY REND","DISMEMBER","CRUELLY DISMEMBER"};
String[] unarmedMessages={"pat","spank","smack","bitchslap","lightly strike","boot","kick","suckerpunch","ankle-stomp","stomp","knee-kick","badly kick","jump-kick","uppercut","kidneypunch","spin-kick","headbutt","cruelly headbutt","dragon-punch","savagely triple-kick","roundhouse","bodyslam","run into","REALLY SMASH","BRUTALLY BOOT","BARBARICALLY BEAT"};
String[] bashMessages   ={"lightly jostle","jostle","butt","bump","thump","stroke","thrust","jab","bash","strike","sock","cuff","knock","flail","whack","beat","smash","cruelly beat","badly smash","horribly thrust","savagely sock","savagely strike","REALLY WHACK","BRUTALLY BEAT","CRUELLY CUFF","BARBARICALLY BASH"};
String[] pierceMessages ={"barely scratch","scratch","slightly pierce","pierce","puncture","sink","bore","crater","cavitate","shaft","gorge","really poke","riddle","dig into","dig through","chasm","drill","powerfully perforate","powerfully pierce","cruelly crater","savagely shaft","uncontrollably dig through","REALLY DRILL","CRUELLY RIDDLE","BRUTALLY BORE","BARBARICALLY PIERCE"};
String[] shieldMessages ={"lightly shove","lightly batter","lightly push","lightly bash","lightly slam","lightly crush","heavily shove","batter","heavily push","heavily bash","slam","crush","really shove","really batter","really push","really bash","really slam","really crush","cruelly shove","cruelly batter","cruelly push","cruelly bash","REALLY SLAM","REALLY CRUSH","BRUTALLY CRUSH","BARBARICALLY SLAM"};

//Add more hit type counters later?

// run() happens when you type $hits in the client.
run(){
	if(argument !=null){
		switch(argument){
			case "reset":
				resetHits();
				clientGUI.printText("general","OK. Resetting hit counters.\n");
				break;
			case "slash":
				reportAllHitsType("slash");
				break;
			case "bash":
				reportAllHitsType("bash");
				break;
			case "unarmed":
				reportAllHitsType("unarmed");
				break;
			case "shield":
				reportAllHitsType("shield");
				break;
			case "pierce":
				reportAllHitsType("pierce");
				break;
			default:
				clientGUI.printText("general","Usable options:\n$hits\n$hits slash\n$hits pierce\n$hits bash\n$hits shield\n$hits unarmed\n$hits reset\n");
		}
	}else{
		reportHits();
	}
}

void bootup(){
	triggers();
	//triggers2();
}


//Reports the whole message list and hits to general window
void reportAllHitsType(String type){
	//if no hits, no report (if we try to report, we divide by zero)
	if(type.equals("slash")){
		if(countHits(slashes)>0){
			for(int i=0;i<slashes.length;i++){
				clientGUI.printText("general",""+slashes[i]+" ("+(slashes[i]*100/countHits(slashes))+"%) "+slashMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("bash")){
		if(countHits(bashes)>0){
			for(int i=0;i<bashes.length;i++){
				clientGUI.printText("general",""+bashes[i]+" ("+(bashes[i]*100/countHits(bashes))+"%) "+bashMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("unarmed")){
		if(countHits(unarmeds)>0){
			for(int i=0;i<unarmeds.length;i++){
				clientGUI.printText("general",""+unarmeds[i]+" ("+(unarmeds[i]*100/countHits(unarmeds))+"%) "+unarmedMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("shield")){
		if(countHits(shields)>0){
			for(int i=0;i<shields.length;i++){
				clientGUI.printText("general",""+shields[i]+" ("+(shields[i]*100/countHits(shields))+"%) "+shieldMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("pierce")){
		if(countHits(pierces)>0){
			for(int i=0;i<pierces.length;i++){
				clientGUI.printText("general",""+pierces[i]+" ("+(pierces[i]*100/countHits(pierces))+"%) "+pierceMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}
}



//Reports only the actual hits done to general window
void reportHits(){
	if(countHits(slashes)>0){
		clientGUI.printText("general","\nSlash attacks:\n");
		for(int i=0;i<slashes.length;i++){
			if(slashes[i]>0){
				clientGUI.printText("general",""+slashes[i]+" ("+(slashes[i]*100/countHits(slashes))+"%) "+slashMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(pierces)>0){
	clientGUI.printText("general","\nPiercing attacks:\n");
		for(int i=0;i<pierces.length;i++){
			if(pierces[i]>0){
				clientGUI.printText("general",""+pierces[i]+" ("+(pierces[i]*100/countHits(pierces))+"%) "+pierceMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(unarmeds)>0){
		clientGUI.printText("general","\nUnarmed attacks:\n");
		for(int i=0;i<unarmeds.length;i++){
			if(unarmeds[i]>0){
				clientGUI.printText("general",""+unarmeds[i]+" ("+(unarmeds[i]*100/countHits(unarmeds))+"%) "+unarmedMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(shields)>0){
		clientGUI.printText("general","\nShield attacks:\n");
		for(int i=0;i<shields.length;i++){
			if(shields[i]>0){
				clientGUI.printText("general",""+shields[i]+" ("+(shields[i]*100/countHits(shields))+"%) "+shieldMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(bashes)>0){
		clientGUI.printText("general","\nBash attacks:\n");
		for(int i=0;i<bashes.length;i++){
			if(bashes[i]>0){
				clientGUI.printText("general",""+bashes[i]+" ("+(bashes[i]*100/countHits(bashes))+"%) "+bashMessages[i]+"\n");
			}
		}
	}
	if(countHits(slashes)+countHits(pierces)+countHits(unarmeds)+countHits(shields)+countHits(bashes)==0){
		clientGUI.printText("general","No registered hits yet\n");
	}
	clientGUI.printText("general","\n");
}


//A module that resets the hits (slashes for now).
void resetHits(){
	for(int i=0;i<slashes.length;i++){
		slashes[i]=0;
		unarmeds[i]=0;
		bashes[i]=0;
		pierces[i]=0;
		shields[i]=0;
	}
}

//A helper module that sums all the hits
int countHits(int[] hitit){
	int total=0;
	for(int i=0;i<hitit.length;i++){
		total+=hitit[i];
	}
	return(total);
}


void addHit(){
	//clientGUI.printText("general","Argument is: "+argument+"\n"); //for debug
	for(int i=0;i<slashes.length;i++){
		if(argument.equals(slashMessages[i])){
			slashes[i]++;
		}
		if(argument.equals(unarmedMessages[i])){
			unarmeds[i]++;
		}
		if(argument.equals(bashMessages[i])){
			bashes[i]++;
		}
		if(argument.equals(pierceMessages[i])){
			pierces[i]++;
		}
		if(argument.equals(shieldMessages[i])){
			shields[i]++;
		}
	}
}




void triggers(){
	triggerManager.newTrigger("addBarelyGraze",
	 "^(Grinning|Smiling|Cackling)? ?(diabolically|devilishly|demonically)? ?[Yy]{1}ou ([a-z -,]+|[A-Z -,]+) ([A-Za-z -]+) (frazzling|ripping|smashing|creating|producing|crushing|sparking|snapping|causing|inducing|making|dislocating|forcing|slicing|mutilating|puncturing)",
	 "$"+SCRIPT_NAME+".addHit %3");	
	
}

//for debug purposes
void triggers2(){
	triggerManager.newTrigger("addBarelyGraze",
	 "^(Grinning|Smiling|Cackling)? ?(diabolically|devilishly|demonically)? ?[Yy]{1}ou ([a-z -,]+|[A-Z -,]+) ([A-Za-z -]+) (frazzling|ripping|smashing|creating|producing|crushing|sparking|snapping|causing|inducing|making|dislocating|forcing|slicing|mutilating|puncturing)",
	 "$"+SCRIPT_NAME+".addHit %3", false, true, false, 
	 new Color[]{red}, Font.PLAIN);	
	//([a-z -]+|[A-Z -]+) (?!your)
	//([A-Za-z -]+) 
	//[^\;]
	
}


