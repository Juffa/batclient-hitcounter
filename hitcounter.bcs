/*
Simple slash type message hit counter by Jkk.
I may extend it to cover other hit types also
Tell me if something is horribly wrong... 
Thanks to Kohothegreat for advicing with the regexp.
*/

SCRIPT_NAME="hits";
SCRIPT_DESC = "collects hit messages";
SCRIPT_OFF = false;


Color red = new Color(127, 127, 0);
 
//Message counter arrays
slashes  = new int [26];
unarmeds = new int [26];
bashes   = new int [26];
pierces  = new int [26];
shields  = new int [26];

int missed=0;
int dodged=0;
int parried=0;

slashesCompare  = new int [26];
unarmedsCompare = new int [26];
bashesCompare   = new int [26];
piercesCompare  = new int [26];
shieldsCompare  = new int [26];

int missedCompare=0;
int dodgedCompare=0;
int parriedCompare=0;


//Messages stored in an array
String[] slashMessages  ={"barely graze","solidly slash","gash","lightly cut","cut","tear","incise","shred","horribly shred","slash","incisively cut","incisively tear","slit","cruelly tatter","savagely shave","rive","cruelly slash","uncontrollably slash","quickly cut","savagely rip","BRUTALLY TEAR","SAVAGELY SHRED","CRUELLY REND","BARBARICALLY REND","DISMEMBER","CRUELLY DISMEMBER"};
String[] unarmedMessages={"pat","spank","smack","bitchslap","lightly strike","boot","kick","suckerpunch","ankle-stomp","stomp","knee-kick","badly kick","jump-kick","uppercut","kidneypunch","spin-kick","headbutt","cruelly headbutt","dragon-punch","savagely triple-kick","roundhouse","bodyslam","run into","REALLY SMASH","BRUTALLY BOOT","BARBARICALLY BEAT"};
String[] bashMessages   ={"lightly jostle","jostle","butt","bump","thump","stroke","thrust","jab","bash","strike","sock","cuff","knock","flail","whack","beat","smash","cruelly beat","badly smash","horribly thrust","savagely sock","savagely strike","REALLY WHACK","BRUTALLY BEAT","CRUELLY CUFF","BARBARICALLY BASH"};
String[] pierceMessages ={"barely scratch","scratch","slightly pierce","pierce","puncture","sink","bore","crater","cavitate","shaft","gorge","really poke","riddle","dig into","dig through","chasm","drill","powerfully perforate","powerfully pierce","cruelly crater","savagely shaft","uncontrollably dig through","REALLY DRILL","CRUELLY RIDDLE","BRUTALLY BORE","BARBARICALLY PIERCE"};
String[] shieldMessages ={"lightly shove","lightly batter","lightly push","lightly bash","lightly slam","lightly crush","heavily shove","batter","heavily push","heavily bash","slam","crush","really shove","really batter","really push","really bash","really slam","really crush","cruelly shove","cruelly batter","cruelly push","cruelly bash","REALLY SLAM","REALLY CRUSH","BRUTALLY CRUSH","BARBARICALLY SLAM"};

//Add more hit type counters later?

// run() happens when you type $hits in the client.
run(){
	if(argument !=null){
		switch(argument){
			case "reset":
				resetHits();
				clientGUI.printText("general","OK. Resetting hit counters.\n");
				break;
				
			case "slash":
				reportAllHitsType("slash");
				break;
				
			case "bash":
				reportAllHitsType("bash");
				break;
				
			case "unarmed":
				reportAllHitsType("unarmed");
				break;
				
			case "shield":
				reportAllHitsType("shield");
				break;
				
			case "pierce":
				reportAllHitsType("pierce");
				break;
				
			case "store":
				copyCompare();
				break;
				
			case "compare":
				reportCompare();
				break;
				
			default:
				clientGUI.printText("general","Usable options:\n$hits\n$hits slash\n$hits pierce\n$hits bash\n$hits shield\n$hits unarmed\n$hits reset\n");
		}
	}else{
		reportHits();
	}
}

void bootup(){
	triggers();
	//triggers2();
}


//Reports the whole message list of single type and hits
void reportAllHitsType(String type){
	//if no hits, no report (if we try to report, we divide by zero)
	if(type.equals("slash")){
		if(countHits(slashes)>0){
			for(int i=0;i<slashes.length;i++){
				clientGUI.printText("general",""+slashes[i]+" ("+Math.round((float)slashes[i]*100/countHits(slashes))+"%) "+slashMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("bash")){
		if(countHits(bashes)>0){
			for(int i=0;i<bashes.length;i++){
				clientGUI.printText("general",""+bashes[i]+" ("+Math.round((float)bashes[i]*100/countHits(bashes))+"%) "+bashMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("unarmed")){
		if(countHits(unarmeds)>0){
			for(int i=0;i<unarmeds.length;i++){
				clientGUI.printText("general",""+unarmeds[i]+" ("+Math.round((float)unarmeds[i]*100/countHits(unarmeds))+"%) "+unarmedMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("shield")){
		if(countHits(shields)>0){
			for(int i=0;i<shields.length;i++){
				clientGUI.printText("general",""+shields[i]+" ("+Math.round((float)shields[i]*100/countHits(shields))+"%) "+shieldMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}else if(type.equals("pierce")){
		if(countHits(pierces)>0){
			for(int i=0;i<pierces.length;i++){
				clientGUI.printText("general",""+pierces[i]+" ("+Math.round((float)pierces[i]*100/countHits(pierces))+"%) "+pierceMessages[i]+"\n");
			}
		}
		else{
			clientGUI.printText("general","No registered hits yet\n");
		}
	}
}


//Reports only the actual hits done but from all types if there are any
void reportHits(){
	if(countHits(slashes)>0){
		clientGUI.printText("general","\nSlash attacks:\n");
		for(int i=0;i<slashes.length;i++){
			if(slashes[i]>0){
				clientGUI.printText("general",""+slashes[i]+spaceCounter(slashes[i],3)+"("+Math.round((float)slashes[i]*100/countAllHits())+"%)"+spaceCounter((int)(Math.round((float)slashes[i]*100/countAllHits())),3)+""+slashMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(pierces)>0){
	clientGUI.printText("general","\nPiercing attacks:\n");
		for(int i=0;i<pierces.length;i++){
			if(pierces[i]>0){
				clientGUI.printText("general",""+pierces[i]+" ("+Math.round((float)pierces[i]*100/countAllHits())+"%) "+pierceMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(unarmeds)>0){
		clientGUI.printText("general","\nUnarmed attacks:\n");
		for(int i=0;i<unarmeds.length;i++){
			if(unarmeds[i]>0){
				clientGUI.printText("general",""+unarmeds[i]+" ("+Math.round((float)unarmeds[i]*100/countAllHits())+"%) "+unarmedMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(shields)>0){
		clientGUI.printText("general","\nShield attacks:\n");
		for(int i=0;i<shields.length;i++){
			if(shields[i]>0){
				clientGUI.printText("general",""+shields[i]+" ("+Math.round((float)shields[i]*100/countAllHits())+"%) "+shieldMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(bashes)>0){
		clientGUI.printText("general","\nBash attacks:\n");
		for(int i=0;i<bashes.length;i++){
			if(bashes[i]>0){
				clientGUI.printText("general",""+bashes[i]+" ("+Math.round((float)bashes[i]*100/countAllHits())+"%) "+bashMessages[i]+"\n");
			}
		}
	}else{}
	if((dodged+parried+missed)>0){
		clientGUI.printText("general","\nMissed attacks:\n");
		if(missed>0){
			clientGUI.printText("general",""+missed+spaceCounter(missed,3)+"("+Math.round((float)missed*100/countAllHits())+"%)"+spaceCounter((int)(Math.round((float)missed*100/countAllHits())),3)+"missed\n");
		}
		if(dodged>0){
			clientGUI.printText("general",""+dodged+spaceCounter(dodged,3)+"("+Math.round((float)dodged*100/countAllHits())+"%)"+spaceCounter((int)(Math.round((float)dodged*100/countAllHits())),3)+"dodged\n");
		}
		if(parried>0){
			clientGUI.printText("general",""+parried+spaceCounter(parried,3)+"("+Math.round((float)parried*100/countAllHits())+"%)"+spaceCounter((int)(Math.round((float)parried*100/countAllHits())),3)+"parried\n");
		}			
	}
	if(countAllHits()==0){
		clientGUI.printText("general","No registered hits yet\n");
	}
	clientGUI.printText("general","\n");
}


//Reports the current hits and compare hits
void reportCompare(){
	if(countHits(slashesCompare)>0){
		clientGUI.printText("general","\nSlash attacks:\n");
		for(int i=0;i<slashesCompare.length;i++){
			if(slashesCompare[i]>0||slashes[i]>0){
				int hitPercentage=0;
				int comparePercentage=0;
				if(slashes[i]==0){
					hitPercentage=0;
				}else{
					hitPercentage=(int)Math.round((float)slashes[i]*100/countAllHits());
				}
				
				if(slashesCompare[i]==0){
					comparePercentage=0;
				}else{
					comparePercentage=(int)Math.round((float)slashesCompare[i]*100/countAllCompareHits());
				}
				
				clientGUI.printText("general",""+slashes[i]+spaceCounter(slashes[i],3)+"("+hitPercentage+"%)"+spaceCounter(hitPercentage,3)+" VS "+slashesCompare[i]+spaceCounter(slashesCompare[i],3)+"("+comparePercentage+"%)"+spaceCounter(comparePercentage,3)+""+slashMessages[i]+spaceCounterString(slashMessages[i],22)+"tähän ero prosenteissa"+"\n");
			}
		}
	}else{}
	if(countHits(piercesCompare)>0){
	clientGUI.printText("general","\nPiercing attacks:\n");
		for(int i=0;i<piercesCompare.length;i++){
			if(piercesCompare[i]>0){
				clientGUI.printText("general",""+piercesCompare[i]+" ("+Math.round((float)piercesCompare[i]*100/countAllCompareHits())+"%) "+pierceMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(unarmedsCompare)>0){
		clientGUI.printText("general","\nUnarmed attacks:\n");
		for(int i=0;i<unarmedsCompare.length;i++){
			if(unarmedsCompare[i]>0){
				clientGUI.printText("general",""+unarmedsCompare[i]+" ("+Math.round((float)unarmedsCompare[i]*100/countAllCompareHits())+"%) "+unarmedMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(shieldsCompare)>0){
		clientGUI.printText("general","\nShield attacks:\n");
		for(int i=0;i<shieldsCompare.length;i++){
			if(shieldsCompare[i]>0){
				clientGUI.printText("general",""+shieldsCompare[i]+" ("+Math.round((float)shieldsCompare[i]*100/countAllCompareHits())+"%) "+shieldMessages[i]+"\n");
			}
		}
	}else{}
	if(countHits(bashesCompare)>0){
		clientGUI.printText("general","\nBash attacks:\n");
		for(int i=0;i<bashesCompare.length;i++){
			if(bashesCompare[i]>0){
				clientGUI.printText("general",""+bashesCompare[i]+" ("+Math.round((float)bashesCompare[i]*100/countAllCompareHits())+"%) "+bashMessages[i]+"\n");
			}
		}
	}else{}
	if((dodgedCompare+parriedCompare+missedCompare)>0){
		clientGUI.printText("general","\nmissedCompare attacks:\n");
		if(missedCompare>0){
			clientGUI.printText("general",""+missedCompare+spaceCounter(missedCompare,3)+"("+Math.round((float)missedCompare*100/countAllCompareHits())+"%)"+spaceCounter((int)(Math.round((float)missedCompare*100/countAllCompareHits())),2)+" missed\n");
		}
		if(dodgedCompare>0){
			clientGUI.printText("general",""+dodgedCompare+spaceCounter(dodgedCompare,3)+"("+Math.round((float)dodgedCompare*100/countAllCompareHits())+"%)"+spaceCounter((int)(Math.round((float)dodgedCompare*100/countAllCompareHits())),2)+" dodged\n");
		}
		if(parriedCompare>0){
			clientGUI.printText("general",""+parriedCompare+spaceCounter(parriedCompare,3)+"("+Math.round((float)parriedCompare*100/countAllCompareHits())+"%)"+spaceCounter((int)(Math.round((float)parriedCompare*100/countAllCompareHits())),2)+" parried\n");
		}			
	}
	if(countAllCompareHits()==0){
		clientGUI.printText("general","No registered hits yet\n");
	}
	clientGUI.printText("general","\n");
}



//A module that resets the hits.
void resetHits(){
	for(int i=0;i<slashes.length;i++){
		slashes[i]=0;
		unarmeds[i]=0;
		bashes[i]=0;
		pierces[i]=0;
		shields[i]=0;
	}
	missed=0;
	dodged=0;
	parried=0;
	
}

//A helper module that sums all the hits
int countHits(int[] hitit){
	int total=0;
	for(int i=0;i<hitit.length;i++){
		total+=hitit[i];
	}
	return(total);
}

int countAllHits(){
	return (countHits(slashes)+countHits(unarmeds)+countHits(bashes)+countHits(pierces)+countHits(shields)+dodged+missed+parried);
} 

int countAllCompareHits(){
	return (countHits(slashesCompare)+countHits(unarmedsCompare)+countHits(bashesCompare)+countHits(piercesCompare)+countHits(shieldsCompare)+dodged+missed+parriedCompare);
} 

void addHit(){
	//clientGUI.printText("general","Argument is: "+argument+"\n"); //for debug
	for(int i=0;i<slashes.length;i++){
		if(argument.equals(slashMessages[i])){
			slashes[i]++;
		}
		if(argument.equals(unarmedMessages[i])){
			unarmeds[i]++;
		}
		if(argument.equals(bashMessages[i])){
			bashes[i]++;
		}
		if(argument.equals(pierceMessages[i])){
			pierces[i]++;
		}
		if(argument.equals(shieldMessages[i])){
			shields[i]++;
		}
	}
}

void copyCompare(){
	
	slashesCompare=Arrays.copyOf(slashes, slashes.length);
	unarmedsCompare=Arrays.copyOf(unarmeds, unarmeds.length);
	bashesCompare=Arrays.copyOf(bashes, bashes.length);
	piercesCompare=Arrays.copyOf(pierces, pierces.length);
	shieldsCompare=Arrays.copyOf(shields, shields.length);
	missedCompare=missed;
	dodgedCompare=dodged;
	parriedCompare=parried;
}








//outputs a string of empty spaces m=the wanted size, n=amount already taken by numbers
String spaceCounter(int n,int m){
	String result="";
	for(int i=Integer.toString(n).length();i<=m-1;i++){
		result+=" ";
	}
	return result;
}
String spaceCounterString(String name,int space){
	String result="";
	for(int i=0;i<space-name.length();i++){
		result+=" ";
	}
	return result;
}

void addMiss(){
	missed++;
}

void addDodgesMyHit(){
	dodged++;
}

void addParriesMyHit(){
	parried++;
}



void triggers(){
	triggerManager.newTrigger("addBarelyGraze",
	 "^(Grinning|Smiling|Cackling)? ?(diabolically|devilishly|demonically)? ?[Yy]{1}ou ([a-z -,]+|[A-Z -,]+) ([A-Za-z -]+) (frazzling|ripping|smashing|creating|producing|crushing|sparking|snapping|causing|inducing|making|dislocating|forcing|slicing|mutilating|puncturing) (?!him cry out in pain!)",
	 "$"+SCRIPT_NAME+".addHit %3", false, true, false, 
	 new Color[]{red}, Font.PLAIN);	
	
	triggerManager.newTrigger("addMiss",
	 "^You miss",
	 "$"+SCRIPT_NAME+".addMiss");
	
	triggerManager.newTrigger("addDodgesMyHit",
	 "^[A-Za-z -]+ successfully dodges your futile",
	 "$"+SCRIPT_NAME+".addDodgesMyHit");
	 
	triggerManager.newTrigger("addParriesMyHit",
	 "^[A-Za-z -]+ successfully parries your",
	 "$"+SCRIPT_NAME+".addParriesMyHit");
}

//for debug purposes
void triggers2(){
	triggerManager.newTrigger("addBarelyGraze",
	 "^(Grinning|Smiling|Cackling)? ?(diabolically|devilishly|demonically)? ?[Yy]{1}ou ([a-z -,]+|[A-Z -,]+) ([A-Za-z -]+) (frazzling|ripping|smashing|creating|producing|crushing|sparking|snapping|causing|inducing|making|dislocating|forcing|slicing|mutilating|puncturing)",
	 "$"+SCRIPT_NAME+".addHit %3", false, true, false, 
	 new Color[]{red}, Font.PLAIN);	
	//([a-z -]+|[A-Z -]+) (?!your)
	//([A-Za-z -]+) 
	//[^\;]
	
}


